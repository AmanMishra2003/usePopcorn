Component Categories
three Categories
1. Stateless / presentational Components
2. Statefull Components
3. Structural Components

**---Component Composition---** Technique to combine different component using children prop
as we studied we can put component inside a component 

************
<model/>
inside model
function model(){
    return (
        <succes/>
    )
}
***********

In this form it creates a problem where we cannot easily use model component and success component is tightly bind to the model component

We can refactor this into a model resusable and diff component

************
inside model
function model({children}){
    return (
        {children}
    )
}

<model>
    <success/>
</model>
***********

now using success component as a child of model component we can reuse model component more easily.

Problem solve by Component Composition
1. Solve Prop drilling problem
2. Create hightly reusable and flexible component

React also allow developer to pass an element as a props

*******************
<model element={<success/>} />

function model({element}){
    return (
        {element}
    )
}
*******************

CleanUp function 
1. Function that we can return from the effect. (optional)

2. Runs on two different ocassions
    - before the effect is executed again
    - after the component has unmounted

Race condition 
suppose u r fetching some data from a api and sending request whenever use type some data .... if one of the many request took longer duration to fetch data then
it might be a case where we don't get the desired data from the api and the request that took longer time gets complete and store data in the state.